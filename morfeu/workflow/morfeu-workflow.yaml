apiVersion: argoproj.io/v1alpha1
kind: CronWorkflow
metadata:
  generateName: morfeu-workflow-            # name of the workflow spec
  namespace: argo
spec:
  schedule: "*/2 18-23,1-2 * * *"
  concurrencyPolicy: Forbid
  workflowSpec:
    entrypoint: morfeu-ci
    parallelism: 1                            # only one instance of the workflow at the time
    volumeClaimTemplates:
      - metadata:
          name: source
        spec:
          accessModes: [ "ReadWriteOnce" ]
          resources:
            requests:
              storage: 10Mi
    onExit: save-code
    arguments:
      parameters:
      - name: registry
        value: registry.container-registry.svc.cluster.local:5000
      - name: repo							# no protocol in front!
        value: github.com/danigiri/morfeu.git
      - name: revision
        value: master
      - name: versionURL
        value: morfeu-service.morfeu.svc.cluster.local:8980/metadata/version.txt
    templates:
    - name: morfeu-ci
      steps:
      - - name: load-source
          template: load-source
      - - name: checkout
          template: checkout
      - - name: build
          template: build
          when: "'{{steps.checkout.outputs.result}}' == 'go'"
    - name: load-source
      inputs:
        artifacts:
          - name: source
            path: /source/morfeu-source
            optional: true
            s3:
              key: morfeu-source
              bucket: my-bucket
              endpoint: minio:9000
              insecure: true
              accessKeySecret:
                name: my-minio-cred
                key: accesskey
              secretKeySecret:
                name: my-minio-cred
                key: secretkey
      container:
        image: alpine:3
        command:
          - mkdir
          - -pv
          - /source/morfeu-source
        volumeMounts:
          - name: source
            mountPath: /source
    - name: checkout
      script:
        image: alpine:3 # we curl the version from the live pod, compare it with the pom.xml contents
        command:
          - sh
        source: |
          apk -q add git curl
          cd /source/morfeu-source
          if [ ! -d morfeu ]; then
              git clone -q https://{{workflow.parameters.repo}} 
              cd morfeu && git checkout -q {{workflow.parameters.revision}}
              echo go
              exit 0
          fi
          cd morfeu
          deployed_='<version>'$(curl -s '{{workflow.parameters.versionURL}}')'</version>'
          local_=$(grep '<version>' pom.xml|head -1|tr -d '[:space:]')
          if [ "$deployed_" != "$local_" ]; then
              git fetch -q --all --tags 
              git checkout -q {{workflow.parameters.revision}}
              git pull -q
              echo 'go'
              exit 0
          fi
          changed_=0
          git fetch -q --all --tags
          git checkout -q {{workflow.parameters.revision}}
          git status | grep -q 'Your branch is behind' && changed_=1
          if [ $changed_ -eq 1 ]; then
              git pull -q
              echo 'go'
          else
              echo 'stop'
          fi
        volumeMounts:
          - name: source
            mountPath: /source

    - name: build
      container:
        image: gcr.io/kaniko-project/executor:latest
        args:
          - '--dockerfile=Dockerfile'
          - '--context=dir:///source/morfeu-source/morfeu'
          - '--destination={{workflow.parameters.registry}}/morfeu'
          - '--insecure'
          - '--cache=true'
          - '--verbosity=info'
        volumeMounts:
          - name: source
            mountPath: /source
    - name: save-code
      container:
        image: alpine:3
        command:
          - "true"
        volumeMounts:
          - name: source
            mountPath: /source
      outputs:
        artifacts:
          - name: source
            path: /source/morfeu-source
            s3:
              key: morfeu-source
              bucket: my-bucket
              endpoint: minio:9000
              insecure: true
              accessKeySecret:
                name: my-minio-cred
                key: accesskey
              secretKeySecret:
                name: my-minio-cred
                key: secretkey
    
#        image: frolvlad/alpine-bash
#        command: ["/bin/bash", "-c"]
#        args: ["cd /src && pwd && ls -l && cd / && pwd && ls -l && cd /mnt && pwd && ls -l"]


